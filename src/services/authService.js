import api from './api';

const authService = {
    login: async (email, password) => {
        try {
            // Validate inputs
            if (!email || !password) {
                throw new Error('Email ve ÅŸifre zorunludur');
            }

            if (!/\S+@\S+\.\S+/.test(email)) {
                throw new Error('GeÃ§erli bir email adresi girin');
            }

            const response = await api.post('/auth/login', {
                email: email.trim().toLowerCase(),
                password
            });

            console.log('ðŸ”‘ Login response:', response.data);
            return response.data;
        } catch (error) {
            console.error('Login error:', error);

            // Handle different error types
            if (error.response) {
                const status = error.response.status;
                const message = error.response.data?.message;

                switch (status) {
                    case 400:
                        throw new Error(message || 'GeÃ§ersiz giriÅŸ bilgileri');
                    case 401:
                        throw new Error('Email veya ÅŸifre hatalÄ±');
                    case 403:
                        throw new Error('HesabÄ±nÄ±z askÄ±ya alÄ±nmÄ±ÅŸ');
                    case 500:
                        throw new Error('Sunucu hatasÄ±. LÃ¼tfen daha sonra tekrar deneyin');
                    default:
                        throw new Error(message || 'GiriÅŸ baÅŸarÄ±sÄ±z');
                }
            } else if (error.request) {
                throw new Error('Sunucuya baÄŸlanÄ±lamÄ±yor. Ä°nternet baÄŸlantÄ±nÄ±zÄ± kontrol edin');
            } else {
                throw new Error(error.message || 'Beklenmeyen bir hata oluÅŸtu');
            }
        }
    },

    register: async (data) => {
        try {
            // Validate required fields
            const requiredFields = ['name', 'surname', 'email', 'password', 'role'];
            for (const field of requiredFields) {
                if (!data[field] || !data[field].toString().trim()) {
                    throw new Error(`${field} alanÄ± zorunludur`);
                }
            }

            // Validate email format
            if (!/\S+@\S+\.\S+/.test(data.email)) {
                throw new Error('GeÃ§erli bir email adresi girin');
            }

            // Validate password strength
            if (data.password.length < 6) {
                throw new Error('Åžifre en az 6 karakter olmalÄ±dÄ±r');
            }

            const response = await api.post('/auth/register', {
                ...data,
                email: data.email.trim().toLowerCase(),
                name: data.name.trim(),
                surname: data.surname.trim(),
            });

            return response.data;
        } catch (error) {
            console.error('Register error:', error.response?.data || error.message);

            if (error.response) {
                const status = error.response.status;
                const message = error.response.data?.message;

                switch (status) {
                    case 400:
                        throw new Error(message || 'GeÃ§ersiz kayÄ±t bilgileri');
                    case 409:
                        throw new Error('Bu email adresi zaten kayÄ±tlÄ±');
                    case 500:
                        throw new Error('Sunucu hatasÄ±. LÃ¼tfen daha sonra tekrar deneyin');
                    default:
                        throw new Error(message || 'KayÄ±t baÅŸarÄ±sÄ±z');
                }
            } else if (error.request) {
                throw new Error('Sunucuya baÄŸlanÄ±lamÄ±yor. Ä°nternet baÄŸlantÄ±nÄ±zÄ± kontrol edin');
            } else {
                throw new Error(error.message || 'Beklenmeyen bir hata oluÅŸtu');
            }
        }
    }
};

export default authService;
